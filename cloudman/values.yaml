# CloudMan has the same dependencies and structure as cloudlaunch,
# and only differs in the container images.

admin_firstname: "CloudMan"
admin_lastname: "Admin"
admin_email: "cloudman@someplace.org"

projman_config:
  projects:
    initial:
      charts:
        galaxy:
          install_template: galaxy

helmsman_config:
  repositories:
     - name: cloudve
       url: https://raw.githubusercontent.com/CloudVE/helm-charts/gvl-5.0/
     - name: jupyterhub
       url: https://jupyterhub.github.io/helm-chart/
  install_templates:
    projman:
      repo: cloudve
      chart: projman
      display_name: Project Management Chart
      context:
        starting_dir: "/gvl"
      template: |
        projectName: "{{context.project.namespace}}"
        data:
          project:
            name: "{{context.project.namespace}}-project-data"
            storageClass: "rclone"
            accessMode: "ReadWriteMany"
            size: 50Gi
            persistentVolume:
              extraSpec:
                csi:
                  driver: csi-rclone
                  volumeHandle: {{context.project.namespace}}-project-data-pv
                  volumeAttributes:
                    remotePathSuffix: "/projects/{{context.project.namespace}}"
                    file-perms: "0777"
                    links: "true"
                    vfs-cache-mode: "full"
          public:
            name: "{{context.project.namespace}}-public-data"
            storageClass: "rclone"
            accessMode: "ReadWriteMany"
            size: 50Gi
            persistentVolume:
              extraSpec:
                csi:
                  driver: csi-rclone
                  volumeHandle: {{context.project.namespace}}-public-data-pv
                  volumeAttributes:
                    remotePathSuffix: "/public"
                    file-perms: "0777"
                    links: "true"
                    vfs-cache-mode: "full"
        configs:
          jupyter_notebook_config.py: |
            c.NotebookApp.notebook_dir = '{{context.starting_dir}}'

    nextcloud:
      repo: cloudve
      chart: nextcloud
      display_name: File Management (NextCloud)
      context:
        oidc_client_secret: '{{.Values.oidc_clients.nextcloud.client_secret}}'
        oidc_client_id: '{{ .Values.oidc_clients.nextcloud.client_id}}'
        domain: '{{ .Values.global.domain }}'
      template: |
        ingress:
          enabled: true
          access_path: "/{{context.project.access_path}}/nextcloud"
          hosts:
            - name: {{context.domain}}
              path: /{{context.project.access_path}}/nextcloud

        nextcloud:
          configs:
            path.config.php: |
              <?php
              $CONFIG = array (
                'overwriteprotocol' => 'https',
                'overwritewebroot' => '{{context.project.access_path}}/nextcloud',
                'overwritehost'     => '{{context.domain}}',
                'overwrite.cli.url' => 'https://{{context.domain}}/{{context.project.access_path}}/nextcloud',
                'skeletondirectory' => '',
                'allow_user_to_change_display_name' => false,
                'lost_password_link' => 'disabled',
                'oidc_login_default_quota' => 1000000000,
                'oidc_login_client_id' => '{{context.oidc_client_id}}',
                'oidc_login_client_secret' => '{{context.oidc_client_secret}}',
                'oidc_login_provider_url' => 'https://{{context.domain}}/auth/realms/master',
                'oidc_login_logout_url' => 'https://{{context.domain}}/auth/realms/master/protocol/openid-connect/logout?redirect_uri=https%3A%2F%2F{{context.domain}}%2F{{context.project.access_path}}%2Fnextcloud%2F',
                'oidc_login_scope' => 'openid profile',
                'oidc_login_auto_redirect' => true,
                'oidc_login_redir_fallback' => true,
                'oidc_login_use_external_storage' => true,
                'oidc_login_disable_registration' => false,
                'oidc_login_attributes' => array(
                  'id' => 'preferred_username',
                  'mail' => 'email',
                ),
              );

          host: "{{context.domain}}"
          extraVolumes:
            - name: project-data
              persistentVolumeClaim:
                claimName: "{{context.project.namespace}}-project-data-pvc"
            - name: public-data
              persistentVolumeClaim:
                claimName: "{{context.project.namespace}}-public-data-pvc"


          extraVolumeMounts:
            - name: project-data
              mountPath: /gvl/projects/current
            - name: public-data
              mountPath: /gvl/public

        persistence:
          enabled: false

        lifecycle:
          postStartCommand:
            - su
            - www-data
            - -s
            - /bin/bash
            - -c
            - > 
              PATH=/var/www/html:$PATH;
              occ app:update --all;
              occ upgrade;
              occ app:enable files_external;
              occ app:disable photos;
              occ app:install oidc_login;
              occ app:install external;
              occ files_external:create -c "datadir=/gvl" "/" local null::null;
              occ config:app:set --value yes files_external allow_user_mounting;
              occ config:app:set --value 'ftp,dav,owncloud,sftp,amazons3,swift,\OC\Files\Storage\SFTP_Key' files_external user_mounting_backends;


    galaxy:
      repo: cloudve
      chart: galaxy
      display_name: Galaxy
      summary: Galaxy is an open, web-based platform for biomedical research
      description: |
        <a href="https://galaxyproject.org/">Galaxy</a> is an open, web-based platform for
        accessible, reproducible, and transparent computational biomedical research.
      maintainers: Galaxy Team
      info_url: https://galaxyproject.org/
      icon_url: https://galaxyproject.org/images/galaxy-logos/galaxy_project_logo_square.png
      context:
        oidc_client_secret: '{{ .Values.oidc_clients.galaxy.client_secret}}'
        domain: '{{ .Values.global.domain }}'
        influxdb_url: '{{ include "cloudman.influxdb_url_cluster" . }}'
        influxdb_database: '{{ include "cloudman.influxdb_database" . }}'
        influxdb_username: '{{ .Values.influxdb.setDefaultUser.username }}'
        influxdb_password: '{{ .Values.influxdb.setDefaultUser.password }}'
      template: |
        configs:
          oidc_config.xml: |
            <?xml version="1.0"?>
            <OIDC>
                <Setter Property="VERIFY_SSL" Value="False" Type="bool"/>
                <Setter Property="REQUESTS_TIMEOUT" Value="3600" Type="float"/>
                <Setter Property="ID_TOKEN_MAX_AGE" Value="3600" Type="float"/>
            </OIDC>
          oidc_backends_config.xml: |
            <?xml version="1.0"?>
            <OIDC>
                <provider name="custos">
                    <url>https://{{context.domain}}/auth</url>
                    <client_id>galaxy-auth</client_id>
                    <client_secret>{{context.oidc_client_secret}}</client_secret>
                    <redirect_uri>https://{{context.domain}}/{{context.project.namespace}}/galaxy/authnz/custos/callback</redirect_uri>
                    <enable_idp_logout>true</enable_idp_logout>
                    <realm>master</realm>
                </provider>
            </OIDC>
          auth_conf.xml: |
              <auth>
              </auth>
          galaxy.yml:
            galaxy:
              enable_oidc: true
              oidc_config_file: /galaxy/server/config/oidc_config.xml
              oidc_backends_config_file: /galaxy/server/config/oidc_backends_config.xml
              auth_config_file: /galaxy/server/config/auth_conf.xml
              require_login: true
              session_duration: 30
        image:
          repository: galaxy/galaxy-k8s
          tag: 20.01
        persistence:
          storageClass: nfs
        postgresql:
          postgresqlPassword: "{{ random_alphanumeric(10) }}"
          postgresqlPostgresPassword: "{{ random_alphanumeric(10) }}"
          persistence:
            storageClass: ebs
        ingress:
          enabled: true
          annotations:
             kubernetes.io/tls-acme: "true"
             cert-manager.io/cluster-issuer: letsencrypt-prod
             nginx.ingress.kubernetes.io/secure-backends: "true"
          hosts:
            - ~
            {%- if not (context.domain | ipaddr) %}
            - "{{ context.domain }}"
            {%- endif %}
          tls:
             - secretName: "{{context.domain | replace('.', '-') }}-key"
               hosts:
                 - "{{context.domain}}"
          path: /{{ context.project.namespace }}/galaxy

        extraVolumes:
          - name: project-data
            persistentVolumeClaim:
              claimName: "{{context.project.namespace}}-project-data-pvc"
          - name: public-data
            persistentVolumeClaim:
              claimName: "{{context.project.namespace}}-public-data-pvc"

        extraVolumeMounts:
          - name: project-data
            mountPath: /gvl/projects/current
          - name: public-data
            mountPath: /gvl/public

    jupyter:
      repo: jupyterhub
      chart: jupyterhub
      display_name: Jupyter
      summary: JupyterHub brings the power of notebooks to groups of users
      description: |
        <a href="https://jupyter.org/">JupyterHub</a> can be used to access your personal
        <a href="http://ipython.org/notebook.html">IPython Notebook</a>.
        IPython Notebook is a web-based interactive computational environment where you can
        combine code execution, text, mathematics, plots and rich media into a single document.
      maintainers: JupyterHub
      info_url: https://jupyter.org/
      icon_url: https://jupyter.org/assets/hublogo.svg
      context:
        oidc_client_id: '{{ .Values.oidc_clients.jupyterhub.client_id }}'
        oidc_client_secret: '{{ .Values.oidc_clients.jupyterhub.client_secret }}'
        domain: '{{ .Values.global.domain }}'
      template: |
        ingress:
          enabled: true
          path: "/{{ context.project.namespace}}/jupyterhub"
          hosts:
            - ~
            {%- if not (context.domain | ipaddr) %}
            - "{{ context.domain }}"
            {%- endif %}

        auth:
          type: custom
          custom:
            className: oauthenticator.generic.GenericOAuthenticator
            config:
              login_service: "keycloak"
              client_id: "{{context.oidc_client_id}}"
              client_secret: "{{context.oidc_client_secret}}"
              token_url: "https://{{context.domain}}/auth/realms/master/protocol/openid-connect/token"
              userdata_url: "https://{{context.domain}}/auth/realms/master/protocol/openid-connect/userinfo"
              userdata_method: GET
              username_key: preferred_username

        hub:
          baseUrl: "/{{ context.project.namespace}}/jupyterhub"
          extraEnv:
            - name: OAUTH2_AUTHORIZE_URL
              value: "https://{{context.domain}}/auth/realms/master/protocol/openid-connect/auth"
            - name: OAUTH2_TOKEN_URL
              value: "https://{{context.domain}}/auth/realms/master/protocol/openid-connect/token"
            - name: OAUTH_CALLBACK_URL
              value: "https://{{context.domain}}/{{context.project.namespace}}/jupyterhub/hub/oauth_callback"

        proxy:
          secretToken: "{{random_alphanumeric(65)}}"

        singleuser:
          storage:
            type: dynamic
            dynamic:
              storageClass: nfs
              accessMode: ["ReadWriteMany"]
              size: 10Gi
            extraVolumes:
              - name: project-data
                persistentVolumeClaim:
                  claimName: "{{context.project.namespace}}-project-data-pvc"
              - name: public-data
                persistentVolumeClaim:
                  claimName: "{{context.project.namespace}}-public-data-pvc"
              - name: notebook-conf
                configMap:
                  name: {{context.project.namespace}}-projman-configs
                  items:
                    - key: "jupyter_notebook_config.py"
                      path: "jupyter_notebook_config.py"
            extraVolumeMounts:
              - name: project-data
                mountPath: /gvl/projects/current
              - name: public-data
                mountPath: /gvl/public
              - name: notebook-conf
                mountPath: /etc/jupyter/

    rstudio:
      repo: cloudve
      chart: rstudio
      display_name: RStudio
      summary: RStudio brings the power of R to users
      description: |
        <a href="https://rstudio.com//">RStudio</a> can be used to access your personal
        RStudio environment.
      context:
        starting_dir: "/gvl/projects/current"
        domain: '{{ .Values.global.domain }}'
      template: |
        ingress:
          access_path: "/{{context.project.namespace}}/rstudio"
          hosts:
            - host: ~
              paths:
                - {{context.project.access_path}}/rstudio(/|$)(.*)
            {%- if not (context.domain | ipaddr) %}
            - host: {{context.domain}}
              paths:
                - /{{context.project.namespace}}/rstudio(/|$)(.*)
            {%- endif %}

        extraVolumes:
          - name: project-data
            persistentVolumeClaim:
              claimName: "{{context.project.namespace}}-project-data-pvc"
          - name: public-data
            persistentVolumeClaim:
              claimName: "{{context.project.namespace}}-public-data-pvc"

        extraVolumeMounts:
          - name: project-data
            mountPath: /gvl/projects/current
          - name: public-data
            mountPath: /gvl/public

        persistence:
          storageClass: nfs
          size: 10Gi

        mutableConfigs:
          - fileName: user-settings
            contents: |+
              initialWorkingDirectory={{context.starting_dir}}
              
            subPath: ".rstudio/monitored/user-settings/"

    terminalman:
      repo: cloudve
      chart: terminalman
      display_name: Project Terminal
      summary: TerminalMan brings the power of a terminal to users
      context:
        oidc_client_id: '{{ .Values.oidc_clients.terminalman.client_id }}'
        oidc_client_secret: '{{ .Values.oidc_clients.terminalman.client_secret }}'
        domain: '{{ .Values.global.domain }}'
        starting_dir: "/gvl/projects/current"
      template: |
        oidc:
          client_id: "terminalman"
          client_secret: {{context.oidc_client_secret}}
          discovery_url: https://{{context.domain}}/auth/realms/master
        ingress:
          hosts:
            - host: ~
              paths:
                - {{context.project.access_path}}/terminalman
            {%- if not (context.domain | ipaddr) %}
            - host: {{context.domain}}
              paths:
                - /{{context.project.namespace}}/terminalman
            {%- endif %}

        proxyinjector:
          nameOverride: {{context.project.namespace}}-terminalman-proxy

        persistence:
          enabled: false

        extraVolumes:
          - name: project-data
            persistentVolumeClaim:
              claimName: "{{context.project.namespace}}-project-data-pvc"
          - name: public-data
            persistentVolumeClaim:
              claimName: "{{context.project.namespace}}-public-data-pvc"

        extraVolumeMounts:
          - name: project-data
            mountPath: /gvl/projects/current
          - name: public-data
            mountPath: /gvl/public

        initialWorkingDir: "{{context.starting_dir}}"


# CloudMan bootstrap data
cm_initial_cluster_data:
rancher_url:
rancher_api_key:
rancher_cluster_id:
rancher_project_id:

# Special global values which are accessible from all charts
global:
    domain: 192.168.99.100

oidc_clients:
  galaxy:
    client_id: 'galaxy-auth'
    # The client secret is required if the client is not public
    public_client: false
    #client_secret: 'cf84xfps-npm5-hvmb-ntui4grybqrh'
    redirect_uris:
      - '{{ include "cloudman.root_url" . }}/*'
  terminalman:
    client_id: 'terminalman'
    #client_secret:
    redirect_uris:
      - '{{ include "cloudman.root_url" . }}/*'
  jupyterhub:
    client_id: 'jupyterhub'
    #client_secret:
    redirect_uris:
      - '{{ include "cloudman.root_url" . }}/*'

cloudlaunch:
  nameOverride: cloudman
  container_name: cloudman-ui
  image:
    repository: cloudve/cloudman-ui
    tag: latest

  ingress:
    enabled: true
    annotations: {}
      # kubernetes.io/ingress.class: nginx
    path: /
    hosts:
      - ~
    tls: []

  cloudlaunchserver:
    nameOverride: cloudman
    container_name: cloudman-server
    rbac:
      serviceAccount: '{{ include "cloudman.fullname" . }}-cm-svc-account'
    image:
      repository: cloudve/cloudman-server
      tag: latest
    env_prefix: CLOUDMAN
    celery_app_name: cloudman
    django_settings_module: cloudman.settings
    django_dir: /app/cloudman
    initial_data: []
    extra_init_scripts:
      load_bootstrap.sh: |
        #!/bin/sh
        sh /app/secrets/bootstrap.sh
    extra_config_mounts:
      - name: cloudman-extra-config
        mount_path: /opt/cloudman/
        config_name: '{{ template "cloudman.fullname" . }}-cm-init-config'
        read_only: true
    extra_secret_mounts:
      - name: cloudman-bootstrap
        mount_path: /app/secrets
        secret_name: '{{ template "cloudman.fullname" . }}-secret'
        read_only: true
    extraInitContainers:
      - name: post-install-job
        image: "gempesaw/curl-jq"
        command: ["/bin/sh", "/kc-init/update_keycloak.sh"]
        volumeMounts:
          - name: kc-init
            mountPath: /kc-init
            readOnly: true
        env:
          - name: OIDC_CLIENT_ID
            value: "cloudman"
          - name: KEYCLOAK_HTTP_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ .Release.Name }}-keycloak-http"
                key: password
    # TODO: include release name in configmap name
    extraVolumes: |
      - name: kubeconfig
        emptyDir: {}
      - name: kc-init
        configMap:
          name: kc-init-script
    extraVolumeMounts: |
      - name: kubeconfig
        mountPath: /home/cloudman
    extra_env:
      - name: OIDC_ENABLED
        value: "True"
      - name: OIDC_AUTH_URI
        value: "{{.Values.ingress.protocol}}://{{.Values.global.domain | default (index .Values.ingress.hosts 0)}}/auth/realms/master"
      - name: OIDC_CLIENT_ID
        value: "cloudman"
      - name: OIDC_PUBLIC_URI
        value: "{{.Values.ingress.protocol}}://{{.Values.global.domain | default (index .Values.ingress.hosts 0)}}/cloudman"
    postgresql:
      enabled: true
      postgresqlDatabase: cloudman
      postgresqlUsername: cloudman
      # The cloudman user password will be autogenerated by cloudlaunchserver chart if not specified
      # postgresqlPassword: some_pass
      # The postgres superuser password will not be set if not specified. If you need a postgres superuser,
      # this should be set at launch (eg: for access to manually modify databases on the running server)
      # postgresqlPostgresPassword: admin_pass
      initdbScriptsSecret: "{{ .Release.Name }}-keycloak-initdb"
      extraEnv:
      - name: KEYCLOAK_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "{{ .Release.Name }}-postgres-keycloak-password"
            key: postgres-keycloak-password
    ingress:
      enabled: true
      path: /cloudman
      hosts:
        - ~
      protocol: https

keycloak:
  userRegistration:
    enabled: false
  keycloak:
    username: admin
    # password: changeMe
    existingSecret: "{{ .Release.Name }}-keycloak-http"
    existingSecretKey: password
    ingress:
      enabled: true
      # Add a null host to default to IP
      hosts:
        - ~
      path: /auth
    persistence:
      deployPostgres: false
      dbVendor: postgres
      dbName: keycloak
      dbPort: 5432
      dbUser: keycloak
      # Will randomly generate if not specified
      # dbPassword: changeMe
      existingSecret: "{{ .Release.Name }}-postgres-keycloak-password"
      existingSecretKey: postgres-keycloak-password
    # Specifying address directly through extraEnv since `dbHost` is not run through tpl
    extraEnv: |
      - name: DB_ADDR
        value: "{{ .Release.Name }}-postgresql"
      - name: PROXY_ADDRESS_FORWARDING
        value: "true"
    extraVolumes: |
      - name: theme
        emptyDir: {}

    extraVolumeMounts: |
      - name: theme
        mountPath: /opt/jboss/keycloak/themes/keycloak

    extraInitContainers: |
      - name: theme-provider
        image: cloudve/gvl-keycloak-theme:latest
        imagePullPolicy: IfNotPresent
        command:
          - sh
        args:
          - -c
          - |
            echo "Copying theme..."
            cp -R /customtheme/* /theme
            echo "done."
        volumeMounts:
          - name: theme
            mountPath: /theme

prometheus:
  grafana:
    # adminPassword: "changeme"
    sidecar:
      dashboards:
        searchNamespace: "ALL"
    grafana.ini:
      server:
        root_url: "https://{{ .Values.global.domain }}/grafana"
        serve_from_sub_path: true
      auth.generic_oauth:
        enabled: true
        client_id: cloudman
        auth_url: "https://{{ .Values.global.domain }}/auth/realms/master/protocol/openid-connect/auth"
        token_url: "https://{{ .Values.global.domain }}/auth/realms/master/protocol/openid-connect/token"
        api_url: "https://{{ .Values.global.domain }}/auth/realms/master/protocol/openid-connect/userinfo"
        tls_skip_verify_insecure: true
        allow_sign_up: true
      auth:
        oauth_auto_login: true
        disable_login_form: true
        disable_signout_menu: true
      auth.anonymous:
        enabled: false
      security:
        allow_embedding: true
    ingress:
      enabled: true
      path: /grafana
      hosts:
        - ~
  prometheus:
    prometheusSpec:
      ruleSelector:
        matchLabels:
          release: "cloudman"
  alertmanager:
    tplConfig: true
    config:
      global:
        resolve_timeout: 5m
        http_config:
          basic_auth:
            username: autoscaleuser
            # password: changemetoarandomvalue
      receivers:
        - name: 'scaleup'
          webhook_configs:
            - url: http://{{ .Release.Name }}-cloudlaunchserver:8000/cloudman/api/v1/clusters/1/signals/scaleup/
              send_resolved: false
        - name: 'scaledown'
          webhook_configs:
            - url: http://{{ .Release.Name }}-cloudlaunchserver:8000/cloudman/api/v1/clusters/1/signals/scaledown/
              send_resolved: false
        - name: 'blackhole'
      route:
        group_by:
          - alertname
        group_interval: 2m
        group_wait: 30s
        repeat_interval: 5m
        receiver: 'blackhole'
        routes:
          - match:
              alertname: ClusterOverUtilized
            receiver: 'scaleup'
          - match:
              alertname: ClusterUnderUtilized
            receiver: 'scaledown'
influxdb:
  setDefaultUser:
    enabled: true
    username: "admin"
    # password: "iAmRequired"
  initScripts:
    enabled: true
  persistence:
    storageClass: ebs
